1. RSA

import java.util.*;
import java.math.*;
 
class RSA
{
 public static void main(String args[])
 {
 Scanner sc=new Scanner(System.in);
 int p,q,n,z,d=0,e,i;
 System.out.println("Enter the number to be encrypted and decrypted");
 int msg=sc.nextInt();
 double c;
 BigInteger msgback; 
 System.out.println("Enter 1st prime number p");
 p=sc.nextInt();
 System.out.println("Enter 2nd prime number q");
 q=sc.nextInt();
 
 n=p*q;
 z=(p-1)*(q-1);
 System.out.println("the value of z = "+z); 
 
 for(e=2;e<z;e++)
 {
 if(gcd(e,z)==1)            // e is for public key exponent
 { 
 break;
 }
 }
 System.out.println("the value of e = "+e); 
 for(i=0;i<=9;i++)
 {
 int x=1+(i*z);
 if(x%e==0)      //d is for private key exponent
 {
 d=x/e;
 break;
 }
 }
 System.out.println("the value of d = "+d); 
 c=(Math.pow(msg,e))%n;
 System.out.println("Encrypted message is : -");
 System.out.println(c);
                //converting int value of n to BigInteger
 BigInteger N = BigInteger.valueOf(n);
 //converting float value of c to BigInteger
 BigInteger C = BigDecimal.valueOf(c).toBigInteger();
 msgback = (C.pow(d)).mod(N);
 System.out.println("Derypted message is : -");
 System.out.println(msgback);
 
 }
 
 static int gcd(int e, int z)
 {
 if(e==0)
 return z; 
 else
 return gcd(z%e,e);
 }
}
//12 3 11


2. Extended Euclidean Algorithm

import java.util.concurrent.atomic.AtomicInteger;
 import java.util.*;
class Main
{
    // Recursive function to demonstrate the extended Euclidean algorithm.
    // It uses pointers to return multiple values.
    public static int extended_gcd(int a, int b, AtomicInteger x, AtomicInteger y)
    {
        if (a == 0)
        {
            x.set(0);
            y.set(1);
            return b;
        }
 
        AtomicInteger _x = new AtomicInteger(), _y = new AtomicInteger();
        int gcd = extended_gcd(b % a, a, _x, _y);
 
        x.set(_y.get() - (b/a) * _x.get());
        y.set(_x.get());
 
        return gcd;
    }
 
    public static void main(String[] args)
    {
		Scanner sc=new Scanner(System.in);
		int a=sc.nextInt();
		int b=sc.nextInt();
        /*int a = 30;
        int b = 50;*/
 
        AtomicInteger x = new AtomicInteger(), y = new AtomicInteger();
 
        System.out.println("The GCD is " + extended_gcd(a, b, x, y));
        System.out.printf("x = %d, y = %d\n", x.get(), y.get());
    }
}
// The GCD is 10
//x = 2, y = -1

3. Chinese Reminder Theorem

// A Java program to demonstrate the working of Chinese remainder
// Theorem
import java.io.*;
import java.util.*;
class GFG {
	
	// k is size of num[] and rem[]. Returns the smallest
	// number x such that:
	// x % num[0] = rem[0],
	// x % num[1] = rem[1],
	// ..................
	// x % num[k-2] = rem[k-1]
	// Assumption: Numbers in num[] are pairwise coprime
	// (gcd for every pair is 1)
	static int findMinX(int num[], int rem[], int k)
	{
		int x = 1; // Initialize result
	
		// As per the Chinese remainder theorem,
		// this loop will always break.
		while (true)
		{
			// Check if remainder of x % num[j] is
			// rem[j] or not (for all j from 0 to k-1)
			int j;
			for (j=0; j<k; j++ )
				if (x%num[j] != rem[j])
				break;
	
			// If all remainders matched, we found x
			if (j == k)
				return x;
	
			// Else try next number
			x++;
		}
	
	}
	
	// Driver method
	public static void main(String args[])
	{
		
		int num[] = {3, 4, 5};
		int rem[] = {2, 3, 1};
		int k = num.length;
		System.out.println("x is " + findMinX(num, rem, k));
	}
}

/*This code is contributed by Nikita Tiwari.*/


4. Diffie Hellman



import java.util.*;
 
class Diffie_Hellman
{
 public static void main(String args[])
 {
 Scanner sc=new Scanner(System.in);
 System.out.println("Enter modulo(p)");
 int p=sc.nextInt();
 System.out.println("Enter primitive root of "+p);
 int g=sc.nextInt();
 System.out.println("Choose 1st secret no(Alice)");
 int a=sc.nextInt();
 System.out.println("Choose 2nd secret no(BOB)");
 int b=sc.nextInt();
 
 int A = (int)Math.pow(g,a)%p;
 int B = (int)Math.pow(g,b)%p;
 
 int S_A = (int)Math.pow(B,a)%p;
 int S_B =(int)Math.pow(A,b)%p; 
 
 if(S_A==S_B)
 {
 System.out.println("ALice and Bob can communicate with each other!!!");
 System.out.println("They share a secret no = "+S_A); 
 }
 
 else
 {
 System.out.println("ALice and Bob cannot communicate with each other!!!");
 }
 } 
}
// 7 17 6 4